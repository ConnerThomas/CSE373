import java.io.*;
import java.util.*;

public class MazeBuilder {
	
	public static void main(String[] args){
			
		int cols;
		int rows;
		String outputFilename;
		
		if (args.length != 3){
			System.err.println(" Incorrect number of arguments");
            System.err.println(" Usage: ");
            System.err.println("\tjava MazeBilder <height> <width> <output file>");
            System.exit(1);
		}
		
		// Read in command line arguments for height and weight and output filename
		rows = Integer.parseInt(args[0]);
		cols = Integer.parseInt(args[1]);
		outputFilename = args[2];
		
		//Error check output file
		
		// Make an arraylist for the edges based on height and width and fill it up
		ArrayList<int[]> edges = new ArrayList<int[]>();
		fillArrayList(edges, rows, cols);		
		
		// Create disjoint set for the cells
		DisjointSets cells = new MyDisjSets(rows * cols);
		
		
		// ********** Build Maze **********
		
		
		// Print out maze to text file
		printMaze(outputFilename, rows, cols);
		
		// Some testing output shit
		System.out.println(rows + " by " + cols);
		System.out.println("Output file is: " + outputFilename);
		
	}
	
	private static void printMaze(String outputFilename, int rows, int cols) throws FileNotFoundException{
		// ********** Print Maze to File **********
		
		// Creates a printstream to write to the specified output file
		PrintStream output = new PrintStream(new File(outputFilename));
		
		// Start by printing the top of the maze to the file
		output.print("+");
		for (int i = 1; i < rows + 1; i++){
			output.print("-+");
		}
		// Then start printing rows
	}
	
	private static void fillArrayList(ArrayList<int[]> edges, int rows, int cols){
		// there should be (2*rows*cols + rows - cols) # of edges
		for (int i = 1; i < rows; i++){
			for (int j = 0; j < cols - 1; j++){
				int[] temp1 = new int[2];
				int[] temp2 = new int[2];
				// add down edge
				temp1[0] = j;
				temp1[1] = i;
				edges.add(temp1);
				//add right edge
				temp2[0] = j;
				temp2[1] = i * cols + j;
			}
		}
	}
	

}
